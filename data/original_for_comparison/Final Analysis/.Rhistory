library(emmeans)
library(effects)
library(multcomp)
library(MuMIn)
library(broom)
library(broom.mixed)
library(dotwhisker)
library(texreg)
library(xtable)
library(sjPlot)
library(ggeffects)
library(cowplot)
library(lme4)
library(sjstats)
library(sjmisc)
library(DHARMa)
library(glmmTMB)
library(lme4)
library(ggeffects)
library(ggplot2)
library(viridis)
library(multcompView)
library("ggpubr")
figTremsDBH <- ggarrange(plotABUNDANCELENGTH, plotINJURIESLENGTH, plotSHELTERLENGTH,
ncol = 2, nrow = 2,
common.legend = TRUE,
legend = "bottom",
combine = TRUE)  # Add this line to combine legends
figTremsDBH
figTremsDBH <- ggarrange(plotABUNDANCELENGTH, plotINJURIESLENGTH, plotSHELTERLENGTH,
ncol = 2, nrow = 2,
common.legend = TRUE,
legend = "bottom",
combine = TRUE)  # Add this line to combine legends
figTremsDBH
figTremsDBH <- ggarrange(plotABUNDANCELENGTH, plotINJURIESLENGTH, plotSHELTERLENGTH,
ncol = 2, nrow = 2,
common.legend = TRUE,
legend = "bottom",
combine = TRUE)  # Add this line to combine legends
figTremsDBH
plotEPIPHYTES <- ggplot() +
geom_smooth(data = Predicted_Epiphytes,
mapping = aes(x = x, y = predicted),
colour = "black") +  # Set the line color to black
geom_ribbon(data = Predicted_Epiphytes,
mapping = aes(x = x, y = predicted, ymin = conf.low, ymax = conf.high, colour = NULL),
alpha = .05, show.legend = FALSE) +
geom_rug(data = TreMs,
mapping = aes(x = Treedata.DBH_cm, y = Epiphytes),
col = "steelblue", alpha = 0.1, size = 1) +
xlab("Diameter (cm)") +
ylab("Epiphytes") +
scale_x_continuous(n.breaks = 5) +
theme(text = element_text(size = 8),
legend.title = element_blank(),
plot.margin = margin(0.5, 2, 0.5, 0.5)) +
scale_linetype(guide = "none") +
theme_bw() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_color_viridis(discrete = TRUE, option = "D") +
scale_fill_viridis(discrete = TRUE) +
theme(legend.title = element_blank())
plotEPIPHYTES
boxplot(Predicted_Abundance ~ foresttype,
data = PlotTreMSum,
col = c("#023047", "#ffb703"),  # Change colors
xlab = "Forest Type",                       # X-axis label
ylab = "Predicted Abundance",               # Y-axis label
cex.axis = 1.5,     # Increase axis tick label size
cex.lab = 1.8       # Increase axis label size
)
boxplot(Predicted_Abundance ~ foresttype,
data = PlotTreMSum,
col = c("#023047", "#ffb703"),  # Change colors
xlab = "Forest Type",                       # X-axis label
ylab = "Predicted Abundance",               # Y-axis label
cex.axis = 1.5,     # Increase axis tick label size
cex.lab = 1.8       # Increase axis label size
)
par(mar = c(5, 6, 4, 2))  # Increase left margin (second number) for y-axis label space
# Create the boxplot
boxplot(Predicted_Abundance ~ foresttype,
data = PlotTreMSum,
col = c("#023047", "#ffb703"),  # Change colors
xlab = "Forest Type",                       # X-axis label
ylab = "Predicted Abundance",               # Y-axis label
cex.axis = 1.5,     # Increase axis tick label size
cex.lab = 1.8       # Increase axis label size
)
shapefile_path <- "study_area.shp"
study_area <- st_read(shapefile_path)
library(sf)
library(ggplot2)
library(readr) # For reading CSV files
library(rnaturalearth)
library(rnaturalearthdata)
library(ggspatial)
library(prettymapr)
shapefile_path <- "study_area.shp"
study_area <- st_read(shapefile_path)
# Load the CSV file with points (fixed path)
csv_file_path <- "MapData.csv"
points_data <- read_csv(csv_file_path)
points_sf <- st_as_sf(points_data, coords = c("X", "Y"), crs = 4326)
# Load the country borders (medium scale, only for Germany)
germany <- ne_countries(scale = "medium", country = "Germany",
returnclass = "sf")
# Ensure the CRS of both study_area and germany are the same
if (st_crs(study_area) != st_crs(germany)) {
germany <- st_transform(germany, crs = st_crs(study_area))
}
bbox <- st_bbox(study_area)
zoom_factor <- 0.1  # Increase this value for more zoom-out
xrange <- (bbox["xmax"] - bbox["xmin"]) * zoom_factor
yrange <- (bbox["ymax"] - bbox["ymin"]) * zoom_factor
background_map <- get_stadiamap(bbox = c(left = bbox["xmin"] - xrange,
bottom = bbox["ymin"] - yrange,
right = bbox["xmax"] + xrange,
top = bbox["ymax"] + yrange),
zoom = 0, maptype = "stamen_terrain_background")
ggplot() +
geom_sf(data = germany, fill = "gray90", color = "black") +  # Country borders as background
geom_sf(data = study_area, fill = "lightblue", color = "darkblue") +
# Plot the study area
geom_sf(data = points_sf, aes(color = Z), size = 2) +  # Plot the points, color by Z
coord_sf(xlim = c(bbox["xmin"] - xrange, bbox["xmax"] + xrange),
ylim = c(bbox["ymin"] - yrange, bbox["ymax"] + yrange)) +  # Set the zoom level
theme_minimal() +
labs(title = "Study Area with Points and Country Borders (Zoomed Out)",
caption = "Source: Shapefile, CSV Data, and Natural Earth")
ggplot() +
geom_sf(data = germany, fill = "gray90", color = "black") +  # Country borders as background
geom_sf(data = study_area, fill = NA, color = NA) +
# Plot the study area
geom_sf(data = points_sf, aes(color = Z), size = 2) +  # Plot the points, color by Z
coord_sf(xlim = c(bbox["xmin"] - xrange, bbox["xmax"] + xrange),
ylim = c(bbox["ymin"] - yrange, bbox["ymax"] + yrange)) +  # Set the zoom level
theme_minimal() +
labs(title = "Study Area with Points and Country Borders (Zoomed Out)",
caption = "Source: Shapefile, CSV Data, and Natural Earth")
ggplot() +
geom_sf(fill = "gray90", color = "black") +  # Country borders as background
geom_sf(data = study_area, fill = NA, color = NA) +
# Plot the study area
geom_sf(data = points_sf, aes(color = Z), size = 2) +  # Plot the points, color by Z
coord_sf(xlim = c(bbox["xmin"] - xrange, bbox["xmax"] + xrange),
ylim = c(bbox["ymin"] - yrange, bbox["ymax"] + yrange)) +  # Set the zoom level
theme_minimal() +
labs(title = "Study Area with Points and Country Borders (Zoomed Out)",
caption = "Source: Shapefile, CSV Data, and Natural Earth")
ggplot() +
geom_sf(fill = "gray90", color = "black") +  # Country borders as background
geom_sf(data = study_area, fill = NA, color = NA) +
# Plot the study area
theme_minimal() +
labs(title = "Study Area with Points and Country Borders (Zoomed Out)",
caption = "Source: Shapefile, CSV Data, and Natural Earth")
ggplot() +
geom_sf(fill = "gray90", color = "black") +  # Country borders as background
geom_sf(data = study_area, fill = NA, color = NA) +
# Plot the study area
geom_sf(data = points_sf, aes(color = Z), size = 2) +  # Plot the points, color by Z
theme_minimal() +
labs(title = "Study Area with Points and Country Borders (Zoomed Out)",
caption = "Source: Shapefile, CSV Data, and Natural Earth")
ggplot() +
geom_sf(fill = "gray90", color = "black") +  # Country borders as background
geom_sf(fill = NA, color = NA) +
# Plot the study area
geom_sf(data = points_sf, aes(color = Z), size = 2) +  # Plot the points, color by Z
theme_minimal() +
labs(title = "Study Area with Points and Country Borders (Zoomed Out)",
caption = "Source: Shapefile, CSV Data, and Natural Earth")
ggplot() +
geom_sf(fill = "gray90", color = "black") +  # Country borders as background
geom_sf(fill = NA, color = NA) +
# Plot the study area
geom_sf(data = points_sf, aes(color = Z), size = 2) +  # Plot the points, color by Z
theme_minimal() +
labs(title = "Study Area with Points and Country Borders (Zoomed Out)",
caption = "Source: Shapefile, CSV Data, and Natural Earth")
library(tidyverse)
library(dplyr)
library(vegan)
library(pastecs)
library(ggplot2); theme_set(theme_bw())
library(lattice)
library(reshape2)
library(plyr)
library(DHARMa)
library(glmmTMB)
library(car)
library(emmeans)
library(effects)
library(multcomp)
library(MuMIn)
library(broom)
library(broom.mixed)
library(dotwhisker)
library(texreg)
library(xtable)
library(sjPlot)
library(ggeffects)
library(cowplot)
library(lme4)
library(sjstats)
library(sjmisc)
library(DHARMa)
library(glmmTMB)
library(lme4)
library(ggeffects)
library(ggplot2)
library(viridis)
library(data.table)
Predicted_AllFungi <- ggpredict(Model_AllFungi,
terms = c("GroupedTreeSpecies[Coniferous spp., Broadleaf spp.]",
"Treedata.Tree_Decay[Decay stage 1,Decay stage 4, Decay stage 5]"),
se = TRUE)
allfungi <- ggplot(Predicted_AllFungi, aes(x = x, y = predicted, fill = group)) +
geom_col(position = "dodge", width = 0.7) +  # Columns for predicted values
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
position = position_dodge(0.7),
width = 0.25) +  # Error bars based on confidence intervals
labs(title = "Perennial and Ephemeral fungi",
x = "Tree species",
y = "Perennial and Ephemeral fungi",
fill = "Decay stage") +
scale_fill_manual(values = c("Decay stage 1" = "#849324",
"Decay stage 4" = "#f6ae2d",
"Decay stage 5" = "#f26419")) +
theme_minimal()
allfugni
allfungi <- ggplot(Predicted_AllFungi, aes(x = x, y = predicted, fill = group)) +
geom_col(position = "dodge", width = 0.7) +  # Columns for predicted values
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
position = position_dodge(0.7),
width = 0.25) +  # Error bars based on confidence intervals
labs(title = "Perennial and Ephemeral fungi",
x = "Tree species",
y = "Perennial and Ephemeral fungi",
fill = "Decay stage") +
scale_fill_manual(values = c("Decay stage 1" = "#849324",
"Decay stage 4" = "#f6ae2d",
"Decay stage 5" = "#f26419")) +
theme_minimal()
allfugni
allfungi
levels(TreMs$GroupedTreeSpecies)
Predicted_AllFungi <- ggpredict(Model_AllFungi,
terms = c("GroupedTreeSpecies[Coniferous spp., Broadleaf spp.]",
"Treedata.Tree_Decay[Decay stage 1,Decay stage 4, Decay stage 5]"),
se = TRUE)
allfungi <- ggplot(Predicted_AllFungi, aes(x = x, y = predicted, fill = group)) +
geom_col(position = "dodge", width = 0.7) +  # Columns for predicted values
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
position = position_dodge(0.7),
width = 0.25) +  # Error bars based on confidence intervals
labs(title = "Perennial and Ephemeral fungi",
x = "Tree species",
y = "Perennial and Ephemeral fungi",
fill = "Decay stage") +
scale_fill_manual(values = c("Decay stage 1" = "#849324",
"Decay stage 4" = "#f6ae2d",
"Decay stage 5" = "#f26419")) +
theme_minimal()
allfungi
boxSAPHEART <- ggplot(Predicted_HeartSap, aes(x = x, y = predicted, fill = x)) +
geom_col(position = "dodge", width = 0.7) +  # Columns for predicted values
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
position = position_dodge(0.7),
width = 0.25) +  # Error bars based on confidence intervals
labs(title = "Exposed heartwood and sapwood",
x = "Decay stage",
y = "Tree Injuries and Exposed wood",
fill = "Decay stage") +
scale_fill_manual(values = c("Decay stage 1" = "#849324",
"Decay stage 4" = "#f6ae2d",
"Decay stage 5" = "#f26419")) +
theme_minimal()
boxSAPHEART
figTremsBox <- ggarrange(boxSAPHEART, allfungi,
ncol = 2, nrow =2,
common.legend = TRUE,
legend="bottom")
library(data.table)
library(tidyverse)
library(dplyr)
library(vegan)
library(pastecs)
library(ggplot2); theme_set(theme_bw())
library(lattice)
library(reshape2)
library(plyr)
library(DHARMa)
library(glmmTMB)
library(car)
library(emmeans)
library(effects)
library(multcomp)
library(MuMIn)
library(broom)
library(broom.mixed)
library(dotwhisker)
library(texreg)
library(xtable)
library(sjPlot)
library(ggeffects)
library(cowplot)
library(lme4)
library(sjstats)
library(sjmisc)
library(DHARMa)
library(glmmTMB)
library(lme4)
library(ggeffects)
library(ggplot2)
library(viridis)
library(multcompView)
library("ggpubr")
figTremsBox <- ggarrange(boxSAPHEART, allfungi,
ncol = 2, nrow =2,
common.legend = TRUE,
legend="bottom")
figTremsBox
figTremsBox <- ggarrange(boxSAPHEART, allfungi,
ncol = 2, nrow =2,
common.legend = TRUE,
legend="bottom")
figTremsBox
figTremsBox <- ggarrange(boxSAPHEART, allfungi,
ncol = 2, nrow =2,
common.legend = TRUE,
legend="bottom")
figTremsBox
figTremsBox <- ggarrange(boxSAPHEART, allfungi,
ncol = 2, nrow =1,
common.legend = TRUE,
legend="bottom")
figTremsBox
figTremsBox <- ggarrange(boxSAPHEART, allfungi,
ncol = 2, nrow =1)
figTremsBox
figTremsBox <- ggarrange(boxSAPHEART, allfungi,
ncol = 2, nrow =1)
figTremsBox
library(sf)
library(ggplot2)
library(readr) # For reading CSV files
library(rnaturalearth)
library(rnaturalearthdata)
library(ggspatial)
library(prettymapr)
ggplot() +
geom_sf(data = germany, fill = "gray90", color = "black") +  # Country borders as background
geom_sf(data = study_area, fill = "lightblue", color = "darkblue") +
# Plot the study area
geom_sf(data = points_sf, aes(color = Z), size = 2) +  # Plot the points, color by Z
coord_sf(xlim = c(bbox["xmin"] - xrange, bbox["xmax"] + xrange),
ylim = c(bbox["ymin"] - yrange, bbox["ymax"] + yrange)) +  # Set the zoom level
theme_minimal() +
labs(title = "Study Area with Points and Country Borders (Zoomed Out)",
caption = "Source: Shapefile, CSV Data, and Natural Earth") +
scale_color_gradient(low = "red", high = "yellow")  # Change the colors as desired
library(sf)
library(ggplot2)
library(readr) # For reading CSV files
library(rnaturalearth)
library(rnaturalearthdata)
library(ggspatial)
library(prettymapr)
ggplot() +
geom_sf(data = germany, fill = "gray90", color = "black") +  # Country borders as background
geom_sf(data = study_area, fill = "lightblue", color = "darkblue") +
# Plot the study area
geom_sf(data = points_sf, aes(color = Z), size = 2) +  # Plot the points, color by Z
coord_sf(xlim = c(bbox["xmin"] - xrange, bbox["xmax"] + xrange),
ylim = c(bbox["ymin"] - yrange, bbox["ymax"] + yrange)) +  # Set the zoom level
theme_minimal() +
labs(title = "Study Area with Points and Country Borders (Zoomed Out)",
caption = "Source: Shapefile, CSV Data, and Natural Earth") +
scale_color_gradient(low = "red", high = "yellow")  # Change the colors as desired
ggplot() +
geom_sf(data = germany, fill = "gray90", color = "black") +  # Country borders as background
geom_sf(data = study_area, fill = "lightblue", color = "darkblue") +
# Plot the study area
geom_sf(data = points_sf, aes(color = Z), size = 2) +  # Plot the points, color by Z
coord_sf(xlim = c(bbox["xmin"] - xrange, bbox["xmax"] + xrange),
ylim = c(bbox["ymin"] - yrange, bbox["ymax"] + yrange)) +  # Set the zoom level
theme_minimal() +
labs(title = "Study Area with Points and Country Borders (Zoomed Out)",
caption = "Source: Shapefile, CSV Data, and Natural Earth",
color = "Predicted TreM abundance") +
scale_color_gradient(low = "red", high = "yellow")  # Change the colors as desired
library(data.table)
library(tidyverse)
library(dplyr)
library(vegan)
library(pastecs)
library(ggplot2); theme_set(theme_bw())
library(lattice)
library(reshape2)
library(plyr)
library(DHARMa)
library(glmmTMB)
library(car)
library(emmeans)
library(effects)
library(multcomp)
library(MuMIn)
library(broom)
library(broom.mixed)
library(dotwhisker)
library(texreg)
library(xtable)
library(sjPlot)
library(ggeffects)
library(cowplot)
library(lme4)
library(sjstats)
library(sjmisc)
library(DHARMa)
library(glmmTMB)
library(lme4)
library(ggeffects)
library(ggplot2)
library(viridis)
library(multcompView)
library("ggpubr")
total_TreMs <- sum(TreMs$Abundance, na.rm = TRUE)
total_TreMs
colnames$TreMs
colnames(TreMs)
new_TreMs <- rowSums(df[, c("ExposedRoots", "WoodyDebris", "LogStructures", "StumpStructures", "DeadwooodShelter", "Other.fungi..corticoid.fungi...others.", "Fungi.cluster.",
"group_ti3vx98.Multiple_smaller_cracks_in_the_deadwood", "DecomposedCrack", "group_ti3vx98.Ground_cavity_10_cm_opening","Decomposed.woodpecker.feeding.cavity."  )], na.rm = TRUE)
new_TreMs <- rowSums(TreMs[, c("ExposedRoots", "WoodyDebris", "LogStructures", "StumpStructures", "DeadwooodShelter", "Other.fungi..corticoid.fungi...others.", "Fungi.cluster.",
"group_ti3vx98.Multiple_smaller_cracks_in_the_deadwood", "DecomposedCrack", "group_ti3vx98.Ground_cavity_10_cm_opening","Decomposed.woodpecker.feeding.cavity."  )], na.rm = TRUE)
percentage_contribution <- (new_TreMs / total_TreMs) * 100
percentage_contribution
new_TreMs
head(new_TreMs)
new_TreMs2 <- sum(new_TreMs)
new_TreMs2
percentage_contribution <- (new_TreMs / total_TreMs) * 100
percentage_contribution
new_TreMs2
percentage_contribution <- (new_TreMs2 / total_TreMs) * 100
percentage_contribution
function(subset)
args(subset)
print(subset)
print(as.factor)
library(data.table)
library(tidyverse)
library(dplyr)
library(vegan)
library(pastecs)
library(ggplot2); theme_set(theme_bw())
library(lattice)
library(reshape2)
library(plyr)
library(DHARMa)
library(glmmTMB)
library(car)
library(emmeans)
library(effects)
library(multcomp)
library(MuMIn)
library(broom)
library(broom.mixed)
library(dotwhisker)
library(texreg)
library(xtable)
library(sjPlot)
library(ggeffects)
library(cowplot)
library(lme4)
library(sjstats)
library(sjmisc)
library(DHARMa)
library(glmmTMB)
library(lme4)
library(ggeffects)
library(ggplot2)
library(viridis)
library(multcompView)
library("ggpubr")
summary(Model_Abundance)
plotABUNDANCE <- ggplot(Predicted_Abundance, aes(x = x, y = predicted, colour= group)) +
geom_smooth(aes(colour = facet, linetype = group), size = 1) +
geom_ribbon(data = Predicted_Abundance, mapping = aes(x = x, y = predicted, ymin=conf.low, ymax=conf.high, fill=facet, colour=NULL),
alpha=.05, show.legend = TRUE)+
geom_rug(data = TreMs, mapping = aes(x = Treedata.DBH_cm, y = Abundance),
col = "steelblue", alpha = 0.1, size = 1) +
xlab("Diameter (cm)") + ylab("TreM Abundance") +
scale_x_continuous(n.breaks = 5) +
theme_bw() +
theme(text = element_text(size = 15),
legend.title = element_blank(),
plot.margin = margin(0.5, 2, 0.5, 0.5),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_color_manual(values = c("Decay stage 1" = "#849324", "Decay stage 2" = "#6096ba")) +
scale_fill_manual(values = c("Decay stage 1" = "#849324", "Decay stage 2" = "#6096ba")) +
scale_linetype_manual(values = c("solid", "dashed"))
levels(TreMs$GroupedTreeSpecies)
print(plotABUNDANCE)
